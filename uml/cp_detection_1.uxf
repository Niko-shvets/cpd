<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.0">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>40</x>
      <y>168</y>
      <w>360</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>_interface: CurvePattern_
--
+ getXRange(): Vector[Int]
+ getXSize(): Int
+ getY(x): Double
+ getY(): Vector[Double] 
+ fitParameters(yValues: Vector[Double]): (error, CurvePattern) </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>96</x>
      <y>64</y>
      <w>168</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>_class: TrianglePattern_
--
+ length: Int
+ height: Double</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>160</x>
      <y>112</y>
      <w>64</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>60.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>440</x>
      <y>112</y>
      <w>440</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>_object: PatternMatcher_
--
- match(CurvePattern, Vector[Double]): MatchResult
+ match(CurvePattern, Vector[Double], intervals: Array[CPInterval]) 
    : Array[MatchResult]
- multSyncMatch(CurvePattern, Seq[Vector[Double]]): offset    
+ multSyncMatch(CurvePattern, Seq[Vector[Double]], intervals: Array[CPInterval]) 
    : Array[Int]    </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>392</x>
      <y>136</y>
      <w>64</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;50.0;60.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>424</x>
      <y>16</y>
      <w>160</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>_class: MatchResult_
--
+ offset: Int
+ pattern: CurvePattern</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>448</x>
      <y>64</y>
      <w>40</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;30.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>448</x>
      <y>248</y>
      <w>200</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>_class: CPInterval_
extends Comparable
--
+ from: Int
+ to: Int
--
+ isIntersects(CPInterval): Boolean
+ unite(CPInterval): CPInterval</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>544</x>
      <y>208</y>
      <w>24</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>512</x>
      <y>400</y>
      <w>320</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>_object: CriticalIntervalsDetector_
--
- isInternalPoint(statistic: Double, criticalValue): Boolean
+ detect(statisticValues: Vector[Double], criticalValue)
    : Array[CPInterval]</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>512</x>
      <y>344</y>
      <w>88</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>440</x>
      <y>512</y>
      <w>408</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>_class: CPMultiscaleIntervalsDetector[T]_
--
- windowsConf: Array[(size, criticalValue)]
- dataset: Dataset[T]
- statistic: LikelihoodRatioStatistic[T]
- intervalDetector = CriticalIntervalsDetector
--
- computeStatistic(WindowDataset[T]): Vector[Double]
- detectOneScaleIntervals(statisticValues, criticalValue): Array[CPInterval]
- uniteIntervals(Seq[Array[CPInterval]): Array[CPInterval]
+ detect(): Array[CPInterval]</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>520</x>
      <y>456</y>
      <w>48</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>40.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>480</x>
      <y>344</y>
      <w>24</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;210.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>120</x>
      <y>328</y>
      <w>264</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>_object: CPIntervalsSpliter[T]_
--
- windowDataset: WindowDataset[T]
--
- isParameterEquals(windowIndex): Boolean
+ hasMultipleCP(CPInterval): Boolean
+ split(CPInterval): Seq[CPInterval]</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>376</x>
      <y>264</y>
      <w>88</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;80.0</additional_attributes>
  </element>
</diagram>
